version: '3.8'

services:
  # 1. Queuety - Servidor principal
  queuety:
    build: .
    container_name: queuety-server
    ports:
      - "9845:9845"  # Puerto TCP para conexiones de clientes
      - "9846:9846"  # Puerto HTTP para métricas y stats
    environment:
      - QUEUETY_OTEL_ENABLED=true
      - QUEUETY_PROM_METRICS_ENABLED=true
      - BADGER_PATH=/data/badger
      - PROTOCOL=tcp4
      - PORT=:9845
      - WEB_SERVER_PORT=9846
      # - QUEUETY_OTEL_OTLP_GRPC_ENDPOINT=tempo:4317
      # - OTEL_RESOURCE_ATTRIBUTES=service.name=queuety,service.version=1.0.0
    volumes:
      - queuety_data:/data
    networks:
      - queuety-network
    depends_on:
      - tempo
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "nc", "-z", "localhost", "9846"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

  # 2. Prometheus - Scraping de métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - queuety-network
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # 4. Tempo - Almacenamiento y consulta de trazas (configuración ultra-minimalista)
  # tempo:
  #   image: grafana/tempo:latest
  #   container_name: tempo
  #   ports:
  #     - "3200:3200"   # Tempo HTTP
  #     - "4317:4317"   # OTLP gRPC
  #     - "4318:4318"   # OTLP HTTP
  #   command:
  #     - "-config.file=/etc/tempo.yaml"
  #   volumes:
  #     - ./monitoring/tempo-simple.yaml:/etc/tempo.yaml:ro
  #     - tempo_data:/tmp/tempo
  #   networks:
  #     - queuety-network
  #   restart: unless-stopped
  #   # healthcheck:
  #   #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3200/ready"]
  #   #   interval: 30s
  #   #   timeout: 10s
  #   #   retries: 3
  #   #   start_period: 10s

  # 5. Grafana - Dashboard para métricas y trazas
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      # - GF_USERS_ALLOW_SIGN_UP=false
      # - GF_INSTALL_PLUGINS=grafana-jaeger-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      # - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - queuety-network
    depends_on:
      - prometheus
      - tempo
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

volumes:
  queuety_data:
    driver: local
  prometheus_data:
    driver: local
  tempo_data:
    driver: local
  grafana_data:
    driver: local

networks:
  queuety-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 