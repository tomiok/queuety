version: '3.8'

services:
  queuety:
    build: .
    container_name: queuety-server
    ports:
      - "9845:9845"
      - "9846:9846"
    environment:
      - QUEUETY_OTEL_ENABLED=false
      - QUEUETY_PROM_METRICS_ENABLED=true
      - BADGER_PATH=/data/badger
      - OTEL_RESOURCE_ATTRIBUTES=service.name=queuety,service.version=1.0.0
    volumes:
      - queuety_data:/data
    networks:
      - queuety-network
    depends_on:
      - tempo
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - queuety-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - queuety-network
    depends_on:
      - prometheus
      - tempo
    restart: unless-stopped


volumes:
  queuety_data:
    driver: local
  prometheus_data:
    driver: local
  tempo_data:
    driver: local
  grafana_data:
    driver: local

networks:
  queuety-network:
    driver: bridge