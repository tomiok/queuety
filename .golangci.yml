# .golangci.yml
# golangci-lint configuration for GitHub Actions

run:
  timeout: 5m
  issues-exit-code: 1
  tests: true
  skip-dirs:
    - vendor
    - .git
    - bin
    - dist
  skip-files:
    - ".*\\.pb\\.go$"
    - ".*_gen\\.go$"
    - ".*\\.mock\\.go$"

linters:
  disable-all: true
  enable:
    # Core linters (always enable)
    - errcheck        # Check for unchecked errors
    - govet          # Go vet examines Go source code
    - ineffassign    # Detect ineffectual assignments
    - staticcheck    # Static analysis checks
    - unused         # Check for unused constants, variables, functions and types

    # Code quality
    - bodyclose      # Check whether HTTP response body is closed
    - contextcheck   # Check the function whether use a non-inherited context
    - dupl           # Code clone detection
    - errorlint      # Find code that will cause problems with the error wrapping scheme
    - exhaustive     # Check exhaustiveness of enum switch statements
    - gochecknoinits # Check that no init functions are present
    - gocognit       # Compute and check the cognitive complexity of functions
    - goconst        # Find repeated strings that could be replaced by a constant
    - gocritic       # Provides diagnostics that check for bugs, performance and style issues
    - gocyclo        # Compute and check the cyclomatic complexity of functions
    - godot          # Check if comments end in a period
    - gosec          # Inspect source code for security problems
    - lll            # Report long lines
    - makezero       # Find slice declarations with non-zero initial length
    - misspell       # Find commonly misspelled English words in comments
    - nakedret       # Find naked returns in functions greater than a specified function length
    - nilerr         # Find the code that returns nil even if it checks that the error is not nil
    - nilnil         # Check that there is no simultaneous return of nil error and an invalid value
    - noctx          # Find sending http request without context.Context
    - nolintlint     # Report ill-formed or insufficient nolint directives
    - prealloc       # Find slice declarations that could potentially be pre-allocated
    - predeclared    # Find code that shadows one of Go's predeclared identifiers
    - revive         # Fast, configurable, extensible, flexible, and beautiful linter for Go
    - tagliatelle    # Check the struct tags
    - thelper        # Detect golang test helpers without t.Helper() call
    - unconvert      # Remove unnecessary type conversions
    - unparam        # Report unused function parameters
    - wastedassign   # Find wasted assignment statements
    - whitespace     # Tool for detection of leading and trailing whitespace

    # Performance
    - funlen         # Tool for detection of long functions
    - gomnd          # Magic number detector (or 'mnd' in newer versions)

    # Import organization
    - goimports      # Check imports order and make it always deterministic

    # Additional useful linters
    - varnamelen     # Check the length of variable names
    - testpackage    # Make sure that separate _test packages are used

linters-settings:
  govet:
    check-shadowing: false
    enable-all: false
    enable:
      - atomic
      - bools
      - buildtag
      - copylocks
      - errorsas
      - httpresponse
      - loopclosure
      - lostcancel
      - nilfunc
      - printf
      - shift
      - stdmethods
      - structtag
      - tests
      - unmarshal
      - unreachable
      - unsafeptr
      - unusedresult

  gocyclo:
    min-complexity: 15

  goconst:
    min-len: 3
    min-occurrences: 3

  misspell:
    locale: US

  lll:
    line-length: 120

  unparam:
    check-exported: false

  nakedret:
    max-func-lines: 30

  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc
      - importShadow
      - unnamedResult

  funlen:
    lines: 80
    statements: 40

  gomnd:
    settings:
      mnd:
        checks:
          - argument
          - case
          - condition
          - operation
          - return
          - assign
        ignored-numbers:
          - '0'
          - '1'
          - '2'
          - '3'
          - '10'
          - '100'
          - '1000'
        ignored-functions:
          - strings.SplitN
          - make

  gosec:
    excludes:
      - G204  # Subprocess launched with variable
      - G301  # Poor file permissions used when creating a directory
      - G302  # Poor file permissions used with chmod
      - G304  # File path provided as taint input
    exclude-generated: true
    severity: "low"
    confidence: "low"

  revive:
    min-confidence: 0.8
    rules:
      - name: atomic
      - name: line-length-limit
        arguments: [140]
      - name: time-naming
      - name: var-declaration
      - name: unexported-return
      - name: errorf
      - name: blank-imports
      - name: context-as-argument
      - name: dot-imports
      - name: error-return
      - name: error-strings
      - name: error-naming
      # Disable exported function documentation requirement
      # - name: exported
      - name: if-return
      - name: increment-decrement
      - name: var-naming
      # Disable package comment requirement
      # - name: package-comments
      - name: range
      - name: receiver-naming
      - name: indent-error-flow
      - name: superfluous-else

  staticcheck:
    checks: ["all"]

  tagliatelle:
    case:
      rules:
        json: snake
        yaml: camel
        xml: camel
        bson: camel
        avro: snake
        mapstructure: kebab

  varnamelen:
    min-name-length: 2
    ignore-type-assert-ok: true
    ignore-map-index-ok: true
    ignore-chan-recv-ok: true
    ignore-names:
      - err
      - ok
      - id
      - i
      - j
      - k
      - v
      - t
      - x
      - y
      - db
      - tx
      - w
      - r

  testpackage:
    skip-regexp: (export|internal)_test\.go

issues:
  exclude-rules:
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - funlen
        - goconst
        - gocognit
        - gomnd
        - lll
        - varnamelen

    # Exclude some linters from running on main.go files
    - path: main\.go
      linters:
        - gochecknoinits

    # Exclude godoc requirements
    - linters:
        - revive
      text: "exported .* should have comment.*or be unexported"

    - linters:
        - govet
      text: "exported .* should have comment"

    # Exclude some staticcheck messages
    - linters:
        - staticcheck
      text: "SA9003:"

    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "

    # Exclude issues in vendor directory
    - path: vendor
      linters:
        - errcheck
        - gocritic
        - gocyclo
        - gosec

  # Show issues from all files, not just changed files
  new: false

  # Fix found issues (if it's supported by the linter)
  fix: false

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

# Output configuration options
output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true
  uniq-by-line: true
  sort-results: true

# Severity configuration
severity:
  default-severity: error
  case-sensitive: false
  rules:
    - linters:
        - dupl
        - gomnd
        - lll
      severity: warning

    - linters:
        - gocritic
        - varnamelen
      severity: info